/**
 * This module was automatically generated by `ts-interface-builder`
 */
import * as t from "ts-interface-checker";
// tslint:disable:object-literal-key-quotes

export const GeofencingZones = t.iface([], {
  "data": "Data",
  "last_updated": "Date",
  "ttl": "number",
  "version": "Version",
  [t.indexKey]: "any",
});

export const Data = t.iface([], {
  "geofencing_zones": "GeofencingZonesObject",
  "global_rules": t.array("GlobalRule"),
  [t.indexKey]: "any",
});

export const GeofencingZonesObject = t.iface([], {
  "features": t.array("GeoJSONFeature"),
  "type": "GeofencingZonesType",
  [t.indexKey]: "any",
});

export const GeoJSONFeature = t.iface([], {
  "geometry": "GeoJSONMultiPolygon",
  "properties": "Properties",
  "type": "FeatureType",
  [t.indexKey]: "any",
});

export const GeoJSONMultiPolygon = t.iface([], {
  "coordinates": t.array(t.array(t.array(t.array("number")))),
  "type": "GeometryType",
  [t.indexKey]: "any",
});

export const GeometryType = t.lit("MultiPolygon");

export const Properties = t.iface([], {
  "end": t.opt("Date"),
  "name": t.opt(t.array("Name")),
  "rules": t.opt(t.array("Rule")),
  "start": t.opt("Date"),
  [t.indexKey]: "any",
});

export const Name = t.iface([], {
  "language": "string",
  "text": "string",
  [t.indexKey]: "any",
});

export const Rule = t.iface([], {
  "maximum_speed_kph": t.opt("number"),
  "ride_end_allowed": "boolean",
  "ride_start_allowed": "boolean",
  "ride_through_allowed": "boolean",
  "station_parking": t.opt("boolean"),
  "vehicle_type_ids": t.opt(t.array("string")),
  [t.indexKey]: "any",
});

export const FeatureType = t.lit("Feature");

export const GeofencingZonesType = t.lit("FeatureCollection");

export const GlobalRule = t.iface([], {
  "maximum_speed_kph": t.opt("number"),
  "ride_end_allowed": "boolean",
  "ride_start_allowed": "boolean",
  "ride_through_allowed": "boolean",
  "station_parking": t.opt("boolean"),
  "vehicle_type_ids": t.opt(t.array("string")),
  [t.indexKey]: "any",
});

export const Version = t.lit("3.0");

const exportedTypeSuite: t.ITypeSuite = {
  GeofencingZones,
  Data,
  GeofencingZonesObject,
  GeoJSONFeature,
  GeoJSONMultiPolygon,
  GeometryType,
  Properties,
  Name,
  Rule,
  FeatureType,
  GeofencingZonesType,
  GlobalRule,
  Version,
};
export default exportedTypeSuite;
